@model ContosoUniversity.Tender

@{
    ViewBag.Title = "Редактирование";
}

<h2>Редактирование</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Тендер</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.description, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.minPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.minPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.minPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.maxPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.maxPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.maxPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => x.participants, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(x => Model.participantIds, Model.participants, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => Model.participantIds, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(x => x.properties, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(x => Model.propertyIds, Model.properties, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => Model.propertyIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Сохранить общие данные по тендеру" class="btn btn-success" />
            </div>
        </div>

        @Html.Partial("PropertyPartial", Property.QueryAll().Where(p => Model.propertyIds.Contains(p.id)).ToList())

        @Html.Partial("TablePartial", new BidContainer(Model.id))

        <div class="form-group">
            <div class="col-md-10">
                <input type="button" value="Перейти к расчетам" class="btn btn-success" id="calc" />
            </div>
        </div>

    </div>
}

<div>
    @Html.ActionLink("Назад", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function getTable(flag)
        {
            var table = {}
            var participants = @Html.Raw(Json.Encode(Model.participantIds))
            var properties = @Html.Raw(Json.Encode(Model.propertyIds))
            for (pt in participants)
            {
                table[participants[pt]] = {}
                for (py in properties)
                    table[participants[pt]][properties[py]] = $('#bid'+flag+'_'+participants[pt]+'_'+properties[py]).val()
            }
            return table
        }


        function save(id) {
            data = {}
            data['id'] = id
            data['minValue'] = $('#min' + id).val().replace('.', ',')
            data['maxValue'] = $('#max' + id).val().replace('.', ',')
            data['importance'] = $('#i' + id).val()
            data['functionId'] = $('#f' + id).val()
            data['step'] = $('#s' + id).val().replace('.', ',')
            var token = $(':input:hidden[name*="RequestVerificationToken"]');
            data[token.attr('name')] = token.val();
            data['toMax'] = $('#tm' + id).is(':checked')
            $.ajax({
                type: "POST",
                url: "/Property/Save",
                data: data,
            });
        }

        $(document).ready(function() {
            $('#sbmTbl').click(function () {
                // TODO: add check data
                var token = $(':input:hidden[name*="RequestVerificationToken"]');
                var data = {};
                data[token.attr('name')] = token.val();
                data['status'] = 'accept';
                data['def'] = JSON.stringify(getTable('Default'));
                data['max'] = JSON.stringify(getTable('Max'));
                data['tenderId'] = $('#tenderId').val()
                $.ajax({
                    type: "POST",
                    url: "/Bid/Table",
                    data: data,
                });
            });

            $('#participantIds').multiselect({
                nonSelectedText: 'Выберите участников'
            });
            $('#propertyIds').multiselect({
                nonSelectedText: 'Выберите критерии'
            });
        });
    </script>
}
